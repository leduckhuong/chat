const video = document.getElementById('video');
const wrapperEle = document.querySelector('.video-wrapper');
const formTest = document.querySelector('.formTest');
// const check = document.querySelector('.check');

const uri = 'http://127.0.0.1:3000/userFaceVehicleData';

Promise.all([
    faceapi.nets.tinyFaceDetector.loadFromUri('/models'),
    faceapi.nets.faceLandmark68Net.loadFromUri('/models'),
    faceapi.nets.faceRecognitionNet.loadFromUri('/models'),
]).then(startVideo)

async function startVideo() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        video.srcObject = stream;
    } catch (error) {
        console.log(error.name);
    }
}


video.addEventListener('play', () => {
    let canvas = faceapi.createCanvasFromMedia(video);
    wrapperEle.appendChild(canvas);
    let displaySize = { width: video.width, height: video.height };
    faceapi.matchDimensions(canvas, displaySize);
    let detections, detection, faceData;
    setInterval(async () => {
        detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())
            .withFaceLandmarks().withFaceDescriptors();
        detection = detections[0];
        if(!!detection) {
            faceData = detections.map(d=> Array.from(d.descriptor));
            let resizedDetectections = faceapi.resizeResults(detections, displaySize);
            canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
            faceapi.draw.drawDetections(canvas, resizedDetectections);
            faceapi.draw.drawFaceLandmarks(canvas, resizedDetectections); 
        }
    }, 100);
})

// check.addEventListener('click', () => {
//     fetch(uri, {
//         method: 'POST',
//         headers: {
//         'Content-Type': 'application/json'
//         },
//         body: JSON.stringify({
//             face: 'test',
//             vehicle: 'test'
//         }),
//     })
//     .then(response => {
//         console.log(response)
//     })
//     .catch(err => {
//         console.log(err)
//     })
    
// })